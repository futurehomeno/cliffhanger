// Code generated by mockery v2.36.1. DO NOT EDIT.

package mockedadapter

import (
	adapter "github.com/futurehomeno/cliffhanger/adapter"
	mock "github.com/stretchr/testify/mock"
)

// ControllableConnector is an autogenerated mock type for the ControllableConnector type
type ControllableConnector struct {
	mock.Mock
}

// Connect provides a mock function with given fields: t
func (_m *ControllableConnector) Connect(t adapter.Thing) {
	_m.Called(t)
}

// Connectivity provides a mock function with given fields:
func (_m *ControllableConnector) Connectivity() *adapter.ConnectivityDetails {
	ret := _m.Called()

	var r0 *adapter.ConnectivityDetails
	if rf, ok := ret.Get(0).(func() *adapter.ConnectivityDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adapter.ConnectivityDetails)
		}
	}

	return r0
}

// Disconnect provides a mock function with given fields: t
func (_m *ControllableConnector) Disconnect(t adapter.Thing) {
	_m.Called(t)
}

// Ping provides a mock function with given fields:
func (_m *ControllableConnector) Ping() *adapter.PingDetails {
	ret := _m.Called()

	var r0 *adapter.PingDetails
	if rf, ok := ret.Get(0).(func() *adapter.PingDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adapter.PingDetails)
		}
	}

	return r0
}

// NewControllableConnector creates a new instance of ControllableConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewControllableConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *ControllableConnector {
	mock := &ControllableConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
