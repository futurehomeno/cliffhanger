// Code generated by mockery v2.13.1. DO NOT EDIT.

package mockedadapter

import (
	adapter "github.com/futurehomeno/cliffhanger/adapter"
	mock "github.com/stretchr/testify/mock"
)

// ExtendedAdapter is an autogenerated mock type for the ExtendedAdapter type
type ExtendedAdapter struct {
	mock.Mock
}

// AddThing provides a mock function with given fields: thing
func (_m *ExtendedAdapter) AddThing(thing adapter.Thing) error {
	ret := _m.Called(thing)

	var r0 error
	if rf, ok := ret.Get(0).(func(adapter.Thing) error); ok {
		r0 = rf(thing)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Address provides a mock function with given fields:
func (_m *ExtendedAdapter) Address() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CreateThing provides a mock function with given fields: id, info
func (_m *ExtendedAdapter) CreateThing(id string, info interface{}) error {
	ret := _m.Called(id, info)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(id, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroyAllThings provides a mock function with given fields:
func (_m *ExtendedAdapter) DestroyAllThings() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroyThing provides a mock function with given fields: id
func (_m *ExtendedAdapter) DestroyThing(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureThings provides a mock function with given fields: idsAndInfo
func (_m *ExtendedAdapter) EnsureThings(idsAndInfo map[string]interface{}) error {
	ret := _m.Called(idsAndInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(idsAndInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExchangeAddress provides a mock function with given fields: address
func (_m *ExtendedAdapter) ExchangeAddress(address string) (string, bool) {
	ret := _m.Called(address)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ExchangeID provides a mock function with given fields: id
func (_m *ExtendedAdapter) ExchangeID(id string) (string, bool) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// InitializeThings provides a mock function with given fields:
func (_m *ExtendedAdapter) InitializeThings() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *ExtendedAdapter) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RegisterThing provides a mock function with given fields: thing
func (_m *ExtendedAdapter) RegisterThing(thing adapter.Thing) {
	_m.Called(thing)
}

// RemoveAllThings provides a mock function with given fields:
func (_m *ExtendedAdapter) RemoveAllThings() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveThing provides a mock function with given fields: address
func (_m *ExtendedAdapter) RemoveThing(address string) error {
	ret := _m.Called(address)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendExclusionReport provides a mock function with given fields: address
func (_m *ExtendedAdapter) SendExclusionReport(address string) error {
	ret := _m.Called(address)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendInclusionReport provides a mock function with given fields: thing
func (_m *ExtendedAdapter) SendInclusionReport(thing adapter.Thing) error {
	ret := _m.Called(thing)

	var r0 error
	if rf, ok := ret.Get(0).(func(adapter.Thing) error); ok {
		r0 = rf(thing)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceByTopic provides a mock function with given fields: topic
func (_m *ExtendedAdapter) ServiceByTopic(topic string) adapter.Service {
	ret := _m.Called(topic)

	var r0 adapter.Service
	if rf, ok := ret.Get(0).(func(string) adapter.Service); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(adapter.Service)
		}
	}

	return r0
}

// Services provides a mock function with given fields: name
func (_m *ExtendedAdapter) Services(name string) []adapter.Service {
	ret := _m.Called(name)

	var r0 []adapter.Service
	if rf, ok := ret.Get(0).(func(string) []adapter.Service); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adapter.Service)
		}
	}

	return r0
}

// ThingByAddress provides a mock function with given fields: address
func (_m *ExtendedAdapter) ThingByAddress(address string) adapter.Thing {
	ret := _m.Called(address)

	var r0 adapter.Thing
	if rf, ok := ret.Get(0).(func(string) adapter.Thing); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(adapter.Thing)
		}
	}

	return r0
}

// ThingByID provides a mock function with given fields: id
func (_m *ExtendedAdapter) ThingByID(id string) adapter.Thing {
	ret := _m.Called(id)

	var r0 adapter.Thing
	if rf, ok := ret.Get(0).(func(string) adapter.Thing); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(adapter.Thing)
		}
	}

	return r0
}

// ThingByTopic provides a mock function with given fields: topic
func (_m *ExtendedAdapter) ThingByTopic(topic string) adapter.Thing {
	ret := _m.Called(topic)

	var r0 adapter.Thing
	if rf, ok := ret.Get(0).(func(string) adapter.Thing); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(adapter.Thing)
		}
	}

	return r0
}

// Things provides a mock function with given fields:
func (_m *ExtendedAdapter) Things() []adapter.Thing {
	ret := _m.Called()

	var r0 []adapter.Thing
	if rf, ok := ret.Get(0).(func() []adapter.Thing); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adapter.Thing)
		}
	}

	return r0
}

// UnregisterAllThings provides a mock function with given fields:
func (_m *ExtendedAdapter) UnregisterAllThings() {
	_m.Called()
}

// UnregisterThing provides a mock function with given fields: address
func (_m *ExtendedAdapter) UnregisterThing(address string) {
	_m.Called(address)
}

type mockConstructorTestingTNewExtendedAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewExtendedAdapter creates a new instance of ExtendedAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExtendedAdapter(t mockConstructorTestingTNewExtendedAdapter) *ExtendedAdapter {
	mock := &ExtendedAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
