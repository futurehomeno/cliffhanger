// Code generated by mockery v2.12.2. DO NOT EDIT.

package mockedchargepoint

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// AdjustableModeController is an autogenerated mock type for the AdjustableModeController type
type AdjustableModeController struct {
	mock.Mock
}

// ChargepointCableLockReport provides a mock function with given fields:
func (_m *AdjustableModeController) ChargepointCableLockReport() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChargepointChargingModeReport provides a mock function with given fields:
func (_m *AdjustableModeController) ChargepointChargingModeReport() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChargepointCurrentSessionReport provides a mock function with given fields:
func (_m *AdjustableModeController) ChargepointCurrentSessionReport() (float64, error) {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChargepointStateReport provides a mock function with given fields:
func (_m *AdjustableModeController) ChargepointStateReport() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChargepointCableLock provides a mock function with given fields: _a0
func (_m *AdjustableModeController) SetChargepointCableLock(_a0 bool) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetChargepointChargingMode provides a mock function with given fields: mode
func (_m *AdjustableModeController) SetChargepointChargingMode(mode string) error {
	ret := _m.Called(mode)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartChargepointCharging provides a mock function with given fields:
func (_m *AdjustableModeController) StartChargepointCharging() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopChargepointCharging provides a mock function with given fields:
func (_m *AdjustableModeController) StopChargepointCharging() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdjustableModeController creates a new instance of AdjustableModeController. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdjustableModeController(t testing.TB) *AdjustableModeController {
	mock := &AdjustableModeController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
