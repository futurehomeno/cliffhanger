// Code generated by mockery v2.35.3. DO NOT EDIT.

package mockedchargepoint

import (
	chargepoint "github.com/futurehomeno/cliffhanger/adapter/service/chargepoint"
	mock "github.com/stretchr/testify/mock"
)

// AdjustablePhaseModeController is an autogenerated mock type for the AdjustablePhaseModeController type
type AdjustablePhaseModeController struct {
	mock.Mock
}

// ChargepointPhaseModeReport provides a mock function with given fields:
func (_m *AdjustablePhaseModeController) ChargepointPhaseModeReport() (chargepoint.PhaseMode, error) {
	ret := _m.Called()

	var r0 chargepoint.PhaseMode
	var r1 error
	if rf, ok := ret.Get(0).(func() (chargepoint.PhaseMode, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() chargepoint.PhaseMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chargepoint.PhaseMode)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChargepointPhaseMode provides a mock function with given fields: _a0
func (_m *AdjustablePhaseModeController) SetChargepointPhaseMode(_a0 chargepoint.PhaseMode) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(chargepoint.PhaseMode) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdjustablePhaseModeController creates a new instance of AdjustablePhaseModeController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdjustablePhaseModeController(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdjustablePhaseModeController {
	mock := &AdjustablePhaseModeController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
