// Code generated by mockery v2.23.0. DO NOT EDIT.

package mockedcolorctrl

import mock "github.com/stretchr/testify/mock"

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// ColorCtrlColorReport provides a mock function with given fields:
func (_m *Controller) ColorCtrlColorReport() (map[string]int64, error) {
	ret := _m.Called()

	var r0 map[string]int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetColorCtrlColor provides a mock function with given fields: color
func (_m *Controller) SetColorCtrlColor(color map[string]int64) error {
	ret := _m.Called(color)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]int64) error); ok {
		r0 = rf(color)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewController interface {
	mock.TestingT
	Cleanup(func())
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewController(t mockConstructorTestingTNewController) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
