// Code generated by mockery v2.38.0. DO NOT EDIT.

package mockedfanctrl

import mock "github.com/stretchr/testify/mock"

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// FanCtrlModeReport provides a mock function with given fields:
func (_m *Controller) FanCtrlModeReport() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FanCtrlModeReport")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetFanCtrlMode provides a mock function with given fields: mode
func (_m *Controller) SetFanCtrlMode(mode string) error {
	ret := _m.Called(mode)

	if len(ret) == 0 {
		panic("no return value specified for SetFanCtrlMode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
