// Code generated by mockery v2.38.0. DO NOT EDIT.

package mockedmediaplayer

import (
	"github.com/stretchr/testify/mock"

	"github.com/futurehomeno/cliffhanger/adapter/service/mediaplayer"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// Metadata provides a mock function with given fields:
func (_m *Controller) Metadata() (mediaplayer.Metadata, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 mediaplayer.Metadata
	var r1 error
	if rf, ok := ret.Get(0).(func() (mediaplayer.Metadata, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() mediaplayer.Metadata); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mediaplayer.Metadata)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mute provides a mock function with given fields:
func (_m *Controller) Mute() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Mute")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Playback provides a mock function with given fields:
func (_m *Controller) Playback() (mediaplayer.PlaybackAction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Playback")
	}

	var r0 mediaplayer.PlaybackAction
	var r1 error
	if rf, ok := ret.Get(0).(func() (mediaplayer.PlaybackAction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() mediaplayer.PlaybackAction); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mediaplayer.PlaybackAction)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaybackMode provides a mock function with given fields:
func (_m *Controller) PlaybackMode() (mediaplayer.PlaybackMode, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PlaybackMode")
	}

	var r0 mediaplayer.PlaybackMode
	var r1 error
	if rf, ok := ret.Get(0).(func() (mediaplayer.PlaybackMode, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() mediaplayer.PlaybackMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mediaplayer.PlaybackMode)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMute provides a mock function with given fields: mute
func (_m *Controller) SetMute(mute bool) error {
	ret := _m.Called(mute)

	if len(ret) == 0 {
		panic("no return value specified for SetMute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(mute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPlayback provides a mock function with given fields: action
func (_m *Controller) SetPlayback(action mediaplayer.PlaybackAction) error {
	ret := _m.Called(action)

	if len(ret) == 0 {
		panic("no return value specified for SetPlayback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(mediaplayer.PlaybackAction) error); ok {
		r0 = rf(action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPlaybackMode provides a mock function with given fields: mode
func (_m *Controller) SetPlaybackMode(mode mediaplayer.PlaybackMode) error {
	ret := _m.Called(mode)

	if len(ret) == 0 {
		panic("no return value specified for SetPlaybackMode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(mediaplayer.PlaybackMode) error); ok {
		r0 = rf(mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVolume provides a mock function with given fields: level
func (_m *Controller) SetVolume(level int64) error {
	ret := _m.Called(level)

	if len(ret) == 0 {
		panic("no return value specified for SetVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(level)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Volume provides a mock function with given fields:
func (_m *Controller) Volume() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Volume")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
