// Code generated by mockery v2.23.1. DO NOT EDIT.

package mockedmeterelec

import mock "github.com/stretchr/testify/mock"

// ExtendedReporter is an autogenerated mock type for the ExtendedReporter type
type ExtendedReporter struct {
	mock.Mock
}

// ElectricityMeterExtendedReport provides a mock function with given fields:
func (_m *ExtendedReporter) ElectricityMeterExtendedReport() (map[string]float64, error) {
	ret := _m.Called()

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]float64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectricityMeterReport provides a mock function with given fields: unit
func (_m *ExtendedReporter) ElectricityMeterReport(unit string) (float64, error) {
	ret := _m.Called(unit)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (float64, error)); ok {
		return rf(unit)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(unit)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(unit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewExtendedReporter interface {
	mock.TestingT
	Cleanup(func())
}

// NewExtendedReporter creates a new instance of ExtendedReporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExtendedReporter(t mockConstructorTestingTNewExtendedReporter) *ExtendedReporter {
	mock := &ExtendedReporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
