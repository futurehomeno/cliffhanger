<<<<<<< HEAD
// Code generated by mockery v2.36.0. DO NOT EDIT.
=======
// Code generated by mockery v2.35.3. DO NOT EDIT.
>>>>>>> d228d6b (Changed the system to use event system.)

package mockednumericmeter

import (
	numericmeter "github.com/futurehomeno/cliffhanger/adapter/service/numericmeter"
	mock "github.com/stretchr/testify/mock"
)

// ExtendedReporter is an autogenerated mock type for the ExtendedReporter type
type ExtendedReporter struct {
	mock.Mock
}

// MeterExtendedReport provides a mock function with given fields: values
func (_m *ExtendedReporter) MeterExtendedReport(values numericmeter.Values) (numericmeter.ValuesReport, error) {
	ret := _m.Called(values)

	var r0 numericmeter.ValuesReport
	var r1 error
	if rf, ok := ret.Get(0).(func(numericmeter.Values) (numericmeter.ValuesReport, error)); ok {
		return rf(values)
	}
	if rf, ok := ret.Get(0).(func(numericmeter.Values) numericmeter.ValuesReport); ok {
		r0 = rf(values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(numericmeter.ValuesReport)
		}
	}

	if rf, ok := ret.Get(1).(func(numericmeter.Values) error); ok {
		r1 = rf(values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExtendedReporter creates a new instance of ExtendedReporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtendedReporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExtendedReporter {
	mock := &ExtendedReporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
