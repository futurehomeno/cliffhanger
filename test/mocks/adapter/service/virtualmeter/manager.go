// Code generated by mockery v2.35.3. DO NOT EDIT.

package mockedvirtualmeter

import (
	adapter "github.com/futurehomeno/cliffhanger/adapter"
	mock "github.com/stretchr/testify/mock"

	numericmeter "github.com/futurehomeno/cliffhanger/adapter/service/numericmeter"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Add provides a mock function with given fields: addr, modes, unit
func (_m *Manager) Add(addr string, modes map[string]float64, unit string) error {
	ret := _m.Called(addr, modes, unit)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]float64, string) error); ok {
		r0 = rf(addr, modes, unit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Modes provides a mock function with given fields: addr
func (_m *Manager) Modes(addr string) (map[string]float64, error) {
	ret := _m.Called(addr)

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]float64, error)); ok {
		return rf(addr)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]float64); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDevice provides a mock function with given fields: thing, publisher
func (_m *Manager) RegisterDevice(thing adapter.Thing, publisher adapter.Publisher) error {
	ret := _m.Called(thing, publisher)

	var r0 error
	if rf, ok := ret.Get(0).(func(adapter.Thing, adapter.Publisher) error); ok {
		r0 = rf(thing, publisher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: addr
func (_m *Manager) Remove(addr string) error {
	ret := _m.Called(addr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Report provides a mock function with given fields: topic, unit
func (_m *Manager) Report(topic string, unit numericmeter.Unit) (float64, error) {
	ret := _m.Called(topic, unit)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, numericmeter.Unit) (float64, error)); ok {
		return rf(topic, unit)
	}
	if rf, ok := ret.Get(0).(func(string, numericmeter.Unit) float64); ok {
		r0 = rf(topic, unit)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string, numericmeter.Unit) error); ok {
		r1 = rf(topic, unit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reset provides a mock function with given fields: topic
func (_m *Manager) Reset(topic string) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: topic, mode, level
func (_m *Manager) Update(topic string, mode string, level float64) error {
	ret := _m.Called(topic, mode, level)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, float64) error); ok {
		r0 = rf(topic, mode, level)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceActivity provides a mock function with given fields: thingAddr, active
func (_m *Manager) UpdateDeviceActivity(thingAddr string, active bool) error {
	ret := _m.Called(thingAddr, active)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(thingAddr, active)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRequired provides a mock function with given fields: topic
func (_m *Manager) UpdateRequired(topic string) bool {
	ret := _m.Called(topic)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// WithAdapter provides a mock function with given fields: ad
func (_m *Manager) WithAdapter(ad adapter.Adapter) {
	_m.Called(ad)
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
