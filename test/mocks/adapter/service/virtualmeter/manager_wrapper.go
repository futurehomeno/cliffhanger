// Code generated by mockery v2.36.0. DO NOT EDIT.

package mockedvirtualmeter

import (
	adapter "github.com/futurehomeno/cliffhanger/adapter"
	mock "github.com/stretchr/testify/mock"
)

// ManagerWrapper is an autogenerated mock type for the ManagerWrapper type
type ManagerWrapper struct {
	mock.Mock
}

// Manager provides a mock function with given fields:
func (_m *ManagerWrapper) Manager() *virtualmeter.manager {
	ret := _m.Called()

	var r0 *virtualmeter.manager
	if rf, ok := ret.Get(0).(func() *virtualmeter.manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*virtualmeter.manager)
		}
	}

	return r0
}

// RegisterThing provides a mock function with given fields: thing, publisher
func (_m *ManagerWrapper) RegisterThing(thing adapter.Thing, publisher adapter.Publisher) error {
	ret := _m.Called(thing, publisher)

	var r0 error
	if rf, ok := ret.Get(0).(func(adapter.Thing, adapter.Publisher) error); ok {
		r0 = rf(thing, publisher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithAdapter provides a mock function with given fields: ad
func (_m *ManagerWrapper) WithAdapter(ad adapter.Adapter) {
	_m.Called(ad)
}

// NewManagerWrapper creates a new instance of ManagerWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagerWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagerWrapper {
	mock := &ManagerWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
