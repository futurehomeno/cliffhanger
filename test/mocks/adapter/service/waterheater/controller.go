// Code generated by mockery v2.23.1. DO NOT EDIT.

package mockedwaterheater

import mock "github.com/stretchr/testify/mock"

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// SetWaterHeaterMode provides a mock function with given fields: mode
func (_m *Controller) SetWaterHeaterMode(mode string) error {
	ret := _m.Called(mode)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetWaterHeaterSetpoint provides a mock function with given fields: mode, value, unit
func (_m *Controller) SetWaterHeaterSetpoint(mode string, value float64, unit string) error {
	ret := _m.Called(mode, value, unit)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, string) error); ok {
		r0 = rf(mode, value, unit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaterHeaterModeReport provides a mock function with given fields:
func (_m *Controller) WaterHeaterModeReport() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaterHeaterSetpointReport provides a mock function with given fields: mode
func (_m *Controller) WaterHeaterSetpointReport(mode string) (float64, string, error) {
	ret := _m.Called(mode)

	var r0 float64
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (float64, string, error)); ok {
		return rf(mode)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(mode)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(mode)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(mode)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WaterHeaterStateReport provides a mock function with given fields:
func (_m *Controller) WaterHeaterStateReport() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewController interface {
	mock.TestingT
	Cleanup(func())
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewController(t mockConstructorTestingTNewController) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
