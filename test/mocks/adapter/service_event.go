// Code generated by mockery v2.36.0. DO NOT EDIT.

package mockedadapter

import (
	event "github.com/futurehomeno/cliffhanger/event"
	mock "github.com/stretchr/testify/mock"
)

// ServiceEvent is an autogenerated mock type for the ServiceEvent type
type ServiceEvent struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *ServiceEvent) Address() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Class provides a mock function with given fields:
func (_m *ServiceEvent) Class() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Domain provides a mock function with given fields:
func (_m *ServiceEvent) Domain() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HasChanged provides a mock function with given fields:
func (_m *ServiceEvent) HasChanged() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ServiceName provides a mock function with given fields:
func (_m *ServiceEvent) ServiceName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// setAddress provides a mock function with given fields: address
func (_m *ServiceEvent) setAddress(address string) {
	_m.Called(address)
}

// setEvent provides a mock function with given fields: _a0
func (_m *ServiceEvent) setEvent(_a0 event.Event) {
	_m.Called(_a0)
}

// setServiceName provides a mock function with given fields: serviceName
func (_m *ServiceEvent) setServiceName(serviceName string) {
	_m.Called(serviceName)
}

// NewServiceEvent creates a new instance of ServiceEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceEvent {
	mock := &ServiceEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
