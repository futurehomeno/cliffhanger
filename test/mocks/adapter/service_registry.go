// Code generated by mockery v2.36.0. DO NOT EDIT.

package mockedadapter

import (
	adapter "github.com/futurehomeno/cliffhanger/adapter"
	mock "github.com/stretchr/testify/mock"
)

// ServiceRegistry is an autogenerated mock type for the ServiceRegistry type
type ServiceRegistry struct {
	mock.Mock
}

// IsInitialized provides a mock function with given fields:
func (_m *ServiceRegistry) IsInitialized() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ServiceByTopic provides a mock function with given fields: topic
func (_m *ServiceRegistry) ServiceByTopic(topic string) adapter.Service {
	ret := _m.Called(topic)

	var r0 adapter.Service
	if rf, ok := ret.Get(0).(func(string) adapter.Service); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(adapter.Service)
		}
	}

	return r0
}

// Services provides a mock function with given fields: name
func (_m *ServiceRegistry) Services(name string) []adapter.Service {
	ret := _m.Called(name)

	var r0 []adapter.Service
	if rf, ok := ret.Get(0).(func(string) []adapter.Service); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adapter.Service)
		}
	}

	return r0
}

// NewServiceRegistry creates a new instance of ServiceRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceRegistry {
	mock := &ServiceRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
