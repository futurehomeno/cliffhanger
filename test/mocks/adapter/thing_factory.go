// Code generated by mockery v2.12.2. DO NOT EDIT.

package mockedadapter

import (
	adapter "github.com/futurehomeno/cliffhanger/adapter"
	fimpgo "github.com/futurehomeno/fimpgo"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ThingFactory is an autogenerated mock type for the ThingFactory type
type ThingFactory struct {
	mock.Mock
}

// Create provides a mock function with given fields: mqtt, _a1, thingState
func (_m *ThingFactory) Create(mqtt *fimpgo.MqttTransport, _a1 adapter.ExtendedAdapter, thingState adapter.ThingState) (adapter.Thing, error) {
	ret := _m.Called(mqtt, _a1, thingState)

	var r0 adapter.Thing
	if rf, ok := ret.Get(0).(func(*fimpgo.MqttTransport, adapter.ExtendedAdapter, adapter.ThingState) adapter.Thing); ok {
		r0 = rf(mqtt, _a1, thingState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(adapter.Thing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*fimpgo.MqttTransport, adapter.ExtendedAdapter, adapter.ThingState) error); ok {
		r1 = rf(mqtt, _a1, thingState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewThingFactory creates a new instance of ThingFactory. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewThingFactory(t testing.TB) *ThingFactory {
	mock := &ThingFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
