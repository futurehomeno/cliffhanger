// Code generated by mockery v2.36.1. DO NOT EDIT.

package mockedadapter

import (
	adapter "github.com/futurehomeno/cliffhanger/adapter"
	fimpgo "github.com/futurehomeno/fimpgo"

	mock "github.com/stretchr/testify/mock"
)

// ThingPublisher is an autogenerated mock type for the ThingPublisher type
type ThingPublisher struct {
	mock.Mock
}

// PublishServiceMessage provides a mock function with given fields: service, message
func (_m *ThingPublisher) PublishServiceMessage(service adapter.Service, message *fimpgo.FimpMessage) error {
	ret := _m.Called(service, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(adapter.Service, *fimpgo.FimpMessage) error); ok {
		r0 = rf(service, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishThingMessage provides a mock function with given fields: thing, message
func (_m *ThingPublisher) PublishThingMessage(thing adapter.Thing, message *fimpgo.FimpMessage) error {
	ret := _m.Called(thing, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(adapter.Thing, *fimpgo.FimpMessage) error); ok {
		r0 = rf(thing, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewThingPublisher creates a new instance of ThingPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewThingPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *ThingPublisher {
	mock := &ThingPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
