// Code generated by mockery v2.36.0. DO NOT EDIT.

package mockedadapter

import (
	adapter "github.com/futurehomeno/cliffhanger/adapter"
	mock "github.com/stretchr/testify/mock"
)

// ThingRegistry is an autogenerated mock type for the ThingRegistry type
type ThingRegistry struct {
	mock.Mock
}

// ThingByAddress provides a mock function with given fields: address
func (_m *ThingRegistry) ThingByAddress(address string) adapter.Thing {
	ret := _m.Called(address)

	var r0 adapter.Thing
	if rf, ok := ret.Get(0).(func(string) adapter.Thing); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(adapter.Thing)
		}
	}

	return r0
}

// ThingByTopic provides a mock function with given fields: topic
func (_m *ThingRegistry) ThingByTopic(topic string) adapter.Thing {
	ret := _m.Called(topic)

	var r0 adapter.Thing
	if rf, ok := ret.Get(0).(func(string) adapter.Thing); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(adapter.Thing)
		}
	}

	return r0
}

// Things provides a mock function with given fields:
func (_m *ThingRegistry) Things() []adapter.Thing {
	ret := _m.Called()

	var r0 []adapter.Thing
	if rf, ok := ret.Get(0).(func() []adapter.Thing); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adapter.Thing)
		}
	}

	return r0
}

// NewThingRegistry creates a new instance of ThingRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewThingRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *ThingRegistry {
	mock := &ThingRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
