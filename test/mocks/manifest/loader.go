// Code generated by mockery v2.33.3. DO NOT EDIT.

package mockedmanifest

import (
	manifest "github.com/futurehomeno/cliffhanger/manifest"
	mock "github.com/stretchr/testify/mock"
)

// Loader is an autogenerated mock type for the Loader type
type Loader[C any] struct {
	mock.Mock
}

// NewLoader creates a new instance of Loader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoader[C any](t interface {
    mock.TestingT
    Cleanup(func())
}) *Loader[C] {
    mock := &Loader[C]{}
    mock.Mock.Test(t)

    t.Cleanup(func() { mock.AssertExpectations(t) })

    return mock
}

// Load provides a mock function with given fields:
func (_m *Loader[C]) Load() (*manifest.Manifest[C], error) {
	ret := _m.Called()

	var r0 *manifest.Manifest[C]
	var r1 error
	if rf, ok := ret.Get(0).(func() (*manifest.Manifest[C], error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *manifest.Manifest[C]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*manifest.Manifest[C])
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

