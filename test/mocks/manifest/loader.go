// Code generated by mockery v2.23.0. DO NOT EDIT.

package mockedmanifest

import (
	manifest "github.com/futurehomeno/cliffhanger/manifest"
	mock "github.com/stretchr/testify/mock"
)

// Loader is an autogenerated mock type for the Loader type
type Loader struct {
	mock.Mock
}

// Load provides a mock function with given fields:
func (_m *Loader) Load() (*manifest.Manifest, error) {
	ret := _m.Called()

	var r0 *manifest.Manifest
	var r1 error
	if rf, ok := ret.Get(0).(func() (*manifest.Manifest, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *manifest.Manifest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*manifest.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLoader interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoader creates a new instance of Loader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoader(t mockConstructorTestingTNewLoader) *Loader {
	mock := &Loader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
